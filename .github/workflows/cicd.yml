
name: financial-demo cicd

on:
  push:
    paths:
    - 'data/**'
    - 'config.yml'
    - 'domain.yml'
    - 'actions/**'
    - '.github/trigger.txt'

env:
  # TODO: use Makefile to set these values
  AWS_REGION: us-west-2
  AWS_ECR_URI: 024629701212.dkr.ecr.us-west-2.amazonaws.com
  AWS_ECR_REPOSITORY: financial-demo
  AWS_S3_BUCKET_NAME: rasa-financial-demo
  
jobs:
  params:
    name: params
    runs-on: ubuntu-latest
    # Map step outputs to job outputs, for use by downstream jobs
    outputs:
      rasa_version: ${{ steps.versions.outputs.rasa_version }}
      rasa_sdk_version: ${{ steps.versions.outputs.rasa_sdk_version }}
      
      do_action_server: ${{ steps.action_server.outputs.do_action_server }}
      docker_registry: ${{ steps.action_server.outputs.docker_registry }}
      docker_user: ${{ steps.action_server.outputs.docker_user }}
      docker_image: ${{ steps.action_server.outputs.docker_image }}
      docker_tag: ${{ steps.action_server.outputs.docker_tag }}
      
      do_training: ${{ steps.rasa_model.outputs.do_training }}
      rasa_model_name: ${{ steps.rasa_model.outputs.rasa_model_name }}
      rasa_model_path: ${{ steps.rasa_model.outputs.rasa_model_path }}
      
      
      aws_region: ${{ steps.aws.outputs.aws_region }}
      aws_s3: ${{ steps.aws.outputs.aws_s3 }}
      
      do_create_cluster: ${{ steps.aws.outputs.do_create_cluster }}
      aws_eks_create: ${{ steps.aws.outputs.aws_eks_create }}
      
      deploy_namespace: ${{ steps.deploy.outputs.deploy_namespace }}
      deploy_release_name: ${{ steps.deploy.outputs.deploy_release_name }}

    steps:
      - name: checkout
        uses: actions/checkout@v2
          
      - name: files
        id: files
        uses: jitterbit/get-changed-files@v1
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: versions
        id: versions
        run: |
          rasa_version=$( cat requirements.txt | grep 'rasa\[spacy\]' | cut -d'=' -f 3 )-spacy-en
          rasa_sdk_version=$( cat requirements.txt | grep 'rasa-sdk' | cut -d'=' -f 3 )
          
          echo "::set-output name=rasa_version::$rasa_version"
          echo "::set-output name=rasa_sdk_version::$rasa_sdk_version"
        
      - name: action_server
        id: action_server
        run: |
          if [[ "${{ steps.files.outputs.all }}" == *"actions/"* ]]
          then
            echo "::set-output name=do_action_server::true"
          else
            echo "::set-output name=do_action_server::false"
          fi
          
          if [[ github.ref == 'refs/heads/main' ]] || \
             [[ github.head_ref == 'refs/heads/main' ]] 
          then
            echo "::set-output name=docker_registry::docker.io"
            echo "::set-output name=docker_user::oakela"
            echo "::set-output name=docker_image::rasa/financial-demo"
            echo "::set-output name=docker_tag::latest"            
          else
            echo "::set-output name=docker_registry::${{ env.AWS_ECR_URI }}"
            echo "::set-output name=docker_user::AWS"
            echo "::set-output name=docker_image::${{ env.AWS_ECR_REPOSITORY }}"
            # branch name
            echo "::set-output name=docker_tag::${GITHUB_REF##*/}"
          fi
          
      - name: rasa_model
        id: rasa_model
        run: |
          if [[ "${{ steps.files.outputs.all }}" == *"data/"* ]] || \
             [[ "${{ steps.files.outputs.all }}" == *"config.yml"* ]] || \
             [[ "${{ steps.files.outputs.all }}" == *"domain.yml"* ]]
          then
            echo "::set-output name=do_training::true"
          else
            echo "::set-output name=do_training::false"
          fi
          
          if [[ github.ref == 'refs/heads/main' ]] || \
             [[ github.head_ref == 'refs/heads/main' ]] 
          then
            echo "::set-output name=rasa_model_name::latest"
            echo "::set-output name=rasa_model_path::models/latest.tar.gz"
          else
            # branch name
            echo "::set-output name=rasa_model_name::${GITHUB_REF##*/}"
            echo "::set-output name=rasa_model_path::models/${GITHUB_REF##*/}.tar.gz"
          fi
      
      - name: aws
        id: aws
        run: |
          echo "::set-output name=aws_region::${{ env.AWS_REGION }}"
          echo "::set-output name=aws_s3::${{ env.AWS_S3_BUCKET_NAME }}"
              
          if [[ $(make aws-eks-cluster-exists) = True ]]
          then
            echo "::set-output name=do_create_cluster::false"
          else
            echo "::set-output name=do_create_cluster::true"
          fi

      - name: deploy
        id: deploy
        run: |
          echo "::set-output name=deploy_namespace::my-namespace}"
          echo "::set-output name=deploy_release_name::my-release}"


        
  params_summary:
    name: params_summary
    runs-on: ubuntu-latest
    needs: [params]
    steps:
    - name: params_summary
      run: |
        echo rasa_version : ${{ needs.params.outputs.rasa_version }}
        echo rasa_sdk_version : ${{ needs.params.outputs.rasa_sdk_version }}
        
        echo do_action_server: ${{ needs.params.outputs.do_action_server }}
        echo docker_registry : ${{ needs.params.outputs.docker_registry }}
        echo docker_user : ${{ needs.params.outputs.docker_user }}
        echo docker_image : ${{ needs.params.outputs.docker_image }}
        echo docker_tag: ${{ needs.params.outputs.docker_tag }}
        
        echo do_training: ${{ needs.params.outputs.do_training }}
        echo rasa_model_name: ${{ needs.params.outputs.rasa_model_name }}
        echo rasa_model_path: ${{ needs.params.outputs.rasa_model_path }}
        
        echo aws_region: ${{ needs.params.outputs.aws_region }}
        echo aws_s3: ${{ needs.params.outputs.aws_s3 }}
        
        echo do_create_cluster: ${{ needs.params.outputs.aws_eks_create }}
        
        echo deploy_namespace: ${{ needs.params.outputs.deploy_namespace }}
        echo deploy_release_name: ${{ needs.params.outputs.deploy_release_name }}
        exit 1
#
#    - name: Dump GitHub context
#      env:
#        GITHUB_CONTEXT: ${{ toJSON(github) }}
#      run: |
#        echo "$GITHUB_CONTEXT"
#        exit 1
    
  
  action_server:
    name: action_server (to AWS ECR)
    runs-on: ubuntu-latest
    needs: [params, params_summary]
    if: needs.params.outputs.do_action_server  == 'true'
    steps:
      - name: checkout
        uses: actions/checkout@v2
        
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          
      - name: Cache pip
        # see: https://docs.github.com/en/actions/guides/building-and-testing-python#caching-dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
            
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt
          
      - name: Python Code Formatting Tests
        working-directory: ${{ github.workspace }}
        run: |
          make lint
          
      - name: Python Type Checking
        working-directory: ${{ github.workspace }}
        run: |
          make types
          
      - name: Python Unit Tests
        working-directory: ${{ github.workspace }}
        run: |
          make test

      - id: action_server
        name: Build docker image
        uses: RasaHQ/rasa-action-server-gha@main
        with:
          rasa_sdk_version: ${{ needs.params.outputs.rasa_sdk_version }}
          actions_directory: 'actions'
          requirements_file: 'actions/requirements-actions.txt'
          docker_registry: ${{ needs.params.outputs.docker_registry }}
          docker_image_name: ${{ needs.params.outputs.docker_image }}
          docker_image_tag: ${{ needs.params.outputs.docker_tag }}
          docker_registry_push: false
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Push docker image to AWS ECR
        run: |
          make aws-ecr-docker-login
          
          make docker-push \
            ACTION_SERVER_DOCKERPATH=${{ steps.action_server.outputs.docker_image_full_name }}
          
      #      - name: Push docker image to docker.io/rasa, when on main
      #        if: |
      #          github.ref == 'refs/heads/main' || github.head_ref == 'refs/heads/main'
      #        run: |
      #          echo "TODO - CHECK IT"
      #          exit 1
      #          make docker-login \
      #            DOCKER_REGISTRY=${{ needs.params.outputs.docker_registry }} \
      #            DOCKER_USER=${{ needs.params.outputs.docker_user }} \
      #            DOCKER_PW=${{ secrets.DOCKERHUB_PASSWORD }}
      #          
      #          make docker-push \
      #            ACTION_SERVER_DOCKERPATH=${{ steps.action_server.outputs.docker_image_full_name }}

  rasa_model:
    name: rasa_model (to AWS S3)
    runs-on: ubuntu-latest
    needs: [params, params_summary]
    if: needs.params.outputs.do_training  == 'true'
    services:
       # Label used to access the service container
       duckling:
         image: rasa/duckling
         ports:
         # Maps port 8000 on service container to port 8000 on host VM
         - 8000:8000
    steps:
      - name: checkout
        uses: actions/checkout@v2
      
      - name: Rasa Train and Test GitHub Action
        uses: RasaHQ/rasa-train-test-gha@main
        with:
          rasa_version: ${{ needs.params.outputs.rasa_version }}
          rasa_train: true
          train_args: --fixed-model-name ${{ needs.params.outputs.rasa_model_name }}
          rasa_test: false
          test_type: all
          data_validate: false
          cross_validation: false
          publish_summary: false
          github_token: ${{ secrets.GITHUB_TOKEN }}
 
#      - name: Upload rasa model to github artifact storage
#        if: github.ref == 'refs/heads/main'
#        uses: actions/upload-artifact@main
#        with:
#          name: model
#          path: models
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.params.outputs.aws_region }}
          
      - name: Upload rasa model to S3
        run: |
          make aws-s3-copy-rasa-model \
            RASA_MODEL_PATH=${{ needs.params.outputs.rasa_model_path }}

  aws_eks_create_cluster:
    name:  aws_eks_create_cluster
    runs-on: ubuntu-latest
    needs: [params, params_summary]
    if: needs.params.outputs.do_create_cluster  == 'true'
    steps:
      - name: checkout
        uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.params.outputs.aws_region }}
      
      - name: vpc
        run: |
          make aws-cloudformation-eks-vpc-stack-deploy
          
      - name: cluster
        run: |
            make aws-eks-cluster-create
          
  deploy-TEST:
    name: deploy
    runs-on: ubuntu-latest
    needs: [params, aws_eks_create_cluster, rasa_model, action_server]
    # TODO: REMOVE THIS LINE -- FOR DEVELOPMENT PURPOSES, ALWAYS RUN THIS...
    if: always()
    steps:          
      - name: Create namespace
        run: |
          echo "TO BE IMPLEMENTED"
          exit 1
          
      - name: Create pull secret
        run: |
          echo "TO BE IMPLEMENTED"
          exit 1
          
      - name: Deploy same as PROD
        run: |
          echo "TO BE IMPLEMENTED"
          exit 1
          
      - name: Smoketest
        run: |
          echo "TO BE IMPLEMENTED"
          exit 1
          
      - name: Upgrade to new
        run: |
          echo "TO BE IMPLEMENTED"
          exit 1
          
      - name: Smoketest
        run: |
          echo "TO BE IMPLEMENTED"
          exit 1
          
      - name: Cleanup
        if: ${{ env.AWS_EKS_DELETE_NAMESPACE_TEST }}
        run: |
          echo "TO BE IMPLEMENTED"
          exit 1
          
      
  deploy-PROD:
    name: deploy-PRO
    runs-on: ubuntu-latest
    needs: [params, deploy-TEST]
    steps:          
      - run: |
          echo "TO BE IMPLEMENTED"
          exit 1
 
# TODO:
# (-) Remove all the... if: always()
# (-) in rasa_model, reset to true: data_validate, cross_validation & publish_summary
# (-) Cleanup of infrastructure if an aws-sit steps fail
#      https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#needs-context
# (-) Use aws-sagemaker-gpu container to train the rasa model
# (-) Makefile & Dockerfile to extract rasa_sdk version from requirements.txt
# (-) Clean up Makefile help